def registry = 'https://devopsrd.jfrog.io'
pipeline {
    agent {
        node {
            label 'maven'
        }
    }

    environment {
        PATH = "/opt/apache-maven-3.9.11/bin:$PATH"
    }

    stages {
        stage('build-stage') {
            steps {
                sh 'mvn clean deploy'
            }
        }
        // stage('SonarQube analysis') {
        //     environment {
        //         scannerHome = tool 'sonarqube-scanner' // This should match the name of the SonarQube Scanner tool configured in Jenkins    
        //     }
        //     steps {
        //         withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
        //         sh "${scannerHome}/bin/sonar-scanner"
        //     }
        //     }
        // }
    }
        stage("Jar Publish") {
        steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog-cred"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "tweet_trend_repo_rd-libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'  
            
            }
        }   
    }   
}
